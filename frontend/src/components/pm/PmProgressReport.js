import React, { useState, useEffect } from "react";
import { Link, useParams } from "react-router-dom";
import NotificationBell from "../NotificationBell";
import jsPDF from "jspdf";
import api from "../../api/axiosInstance";
import '../style/pm_style/PmProgressReport.css';
// Nav icons
import { FaTachometerAlt, FaComments, FaBoxes, FaUsers, FaProjectDiagram, FaClipboardList, FaChartBar, FaCalendarAlt } from 'react-icons/fa';

export default function PmProgressReport({ userName = 'Z', handleLogout }) {
  const { id: projectId } = useParams(); // Get project id from URL
  const [project, setProject] = useState(null);
  const [aiAnalysis, setAiAnalysis] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [logsUsed, setLogsUsed] = useState([]);
  const [profileMenuOpen, setProfileMenuOpen] = useState(false);

  // Fetch project details
  useEffect(() => {
    if (!projectId) return;
    api.get(`/projects/${projectId}`)
      .then(res => setProject(res.data))
      .catch(err => setError("Project not found."));
  }, [projectId]);

  // DSS Generate Report
  const handleGenerateReport = async () => {
    setLoading(true);
    setError("");
    setAiAnalysis("");
    try {
      const res = await api.get(`/daily-reports/project/${projectId}`);
      const allLogs = res.data || [];
      const latestLogs = [...allLogs]
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 7);

      setLogsUsed(latestLogs);

      const dssRes = await api.post('/dss-report/generate-dss-report', { logs: latestLogs });
      setAiAnalysis(dssRes.data.result);
    } catch (err) {
      setError("Failed to generate AI analysis. Please try again.");
      setAiAnalysis("");
    }
    setLoading(false);
  };

  // Download PDF helper
  const handleDownloadPDF = async () => {
    if (!aiAnalysis) return;
    
    const doc = new jsPDF({ unit: 'pt', format: 'a4' });
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const marginX = 40;
    let y = 40;

    // Load company logo
    const logoURL = `${process.env.PUBLIC_URL || ''}/images/Fadz-logo.png`;
    let logoData = null;
    try {
      const img = new Image();
      img.crossOrigin = 'anonymous';
      logoData = await new Promise((resolve) => {
        img.onload = () => {
          const canvas = document.createElement('canvas');
          canvas.width = img.naturalWidth;
          canvas.height = img.naturalHeight;
          canvas.getContext('2d').drawImage(img, 0, 0);
          resolve({ 
            dataUrl: canvas.toDataURL('image/png'), 
            w: img.naturalWidth, 
            h: img.naturalHeight 
          });
        };
        img.onerror = () => resolve(null);
        img.src = logoURL;
      });
    } catch (error) {
      console.warn('Failed to load logo:', error);
    }

    // Header function to be called on each page
    const drawHeader = () => {
      // Reset to top of page
      y = 40;
      
      // Company logo (large size)
      if (logoData?.dataUrl) {
        const maxLogoWidth = 200;
        const maxLogoHeight = 60;
        const logoRatio = logoData.w / logoData.h;
        let logoWidth = maxLogoWidth;
        let logoHeight = maxLogoWidth / logoRatio;
        
        if (logoHeight > maxLogoHeight) {
          logoHeight = maxLogoHeight;
          logoWidth = maxLogoHeight * logoRatio;
        }
        
        doc.addImage(logoData.dataUrl, 'PNG', marginX, y - 12, logoWidth, logoHeight);
        y += logoHeight + 20;
      }

      // Company name (large font)
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(20);
      doc.text('FadzTrack', marginX, y);
      y += 25;

      // Report title
      doc.setFontSize(16);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(40);
      doc.text('AI Progress Report', marginX, y);
      y += 20;

      // Project information
      if (project) {
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(60);
        doc.text(`Project: ${project.projectName || 'Unknown Project'}`, marginX, y);
        y += 15;
        
        if (project.location?.name) {
          doc.text(`Location: ${project.location.name}`, marginX, y);
          y += 15;
        }
      }

      // Metadata section
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(80);
      
      const currentDate = new Date().toLocaleString();
      doc.text(`Generated by: ${userName || 'Unknown User'}`, marginX, y);
      y += 12;
      doc.text(`Generated on: ${currentDate}`, marginX, y);
      y += 12;
      doc.text(`Exported by: ${userName || 'Unknown User'}`, marginX, y);
      y += 12;
      doc.text(`Export Date & Time: ${currentDate}`, marginX, y);
      y += 20;

      // AI Disclaimer
      doc.setFontSize(9);
      doc.setFont('helvetica', 'italic');
      doc.setTextColor(120);
      doc.text('⚠️ DISCLAIMER: This report is generated by AI and should be reviewed for accuracy.', marginX, y);
      y += 15;
      doc.text('The analysis is based on available data and may not reflect all project nuances.', marginX, y);
      y += 20;

      // Divider line
      doc.setDrawColor(200);
      doc.setLineWidth(1);
      doc.line(marginX, y, pageWidth - marginX, y);
      y += 20;
    };

    // Draw header on first page
    drawHeader();

    // AI Analysis content
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(20);
    
    // Split AI analysis into paragraphs and add to PDF
    const analysisParagraphs = aiAnalysis.split('\n').filter(p => p.trim());
    let currentY = y;
    
    for (const paragraph of analysisParagraphs) {
      if (currentY > pageHeight - 100) {
        doc.addPage();
        drawHeader();
        currentY = y;
      }
      
      const lines = doc.splitTextToSize(paragraph, pageWidth - 2 * marginX);
      doc.text(lines, marginX, currentY);
      currentY += lines.length * 14 + 10;
    }

    // Add logs section
    if (logsUsed.length > 0) {
      if (currentY > pageHeight - 150) {
        doc.addPage();
        drawHeader();
        currentY = y;
      }
      
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(40);
      doc.text('Daily Logs Used for Analysis:', marginX, currentY);
      currentY += 20;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(60);
      
      logsUsed.forEach((log, index) => {
        if (currentY > pageHeight - 100) {
          doc.addPage();
          drawHeader();
          currentY = y;
        }
        
        doc.text(`Log ${index + 1} - Date: ${log.date}`, marginX, currentY);
        currentY += 12;
        
        if (log.workPerformed && Array.isArray(log.workPerformed)) {
          log.workPerformed.forEach(work => {
            if (currentY > pageHeight - 100) {
              doc.addPage();
              drawHeader();
              currentY = y;
            }
            doc.text(`  • ${work.task || 'Unknown Task'} - Status: ${work.status || 'Unknown'}`, marginX + 20, currentY);
            currentY += 10;
          });
        }
        currentY += 10;
      });
    }

    // Footer on each page
    const addFooter = (pageNum) => {
      const originalPage = doc.internal.getCurrentPageInfo().pageNumber;
      doc.setPage(pageNum);
      
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(120);
      
      const footerText = `Generated: ${new Date().toLocaleString()}`;
      const pageText = `Page ${pageNum} of ${doc.internal.getNumberOfPages()}`;
      
      doc.text(footerText, marginX, pageHeight - 20);
      doc.text(pageText, pageWidth - marginX - doc.getTextWidth(pageText), pageHeight - 20);
      
      doc.setPage(originalPage);
    };

    // Add footer to all pages
    for (let i = 1; i <= doc.internal.getNumberOfPages(); i++) {
      addFooter(i);
    }

    // Save the PDF
    const fileName = `AI_Progress_Report_${project?.projectName?.replace(/[^a-zA-Z0-9]/g, '_') || 'Unknown'}_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
  };

  return (
   <div>
     <header className="header">
  <div className="logo-container">
    <img
      src={require('../../assets/images/FadzLogo1.png')}
      alt="FadzTrack Logo"
      className="logo-img"
    />
    <h1 className="brand-name">FadzTrack</h1>
  </div>

  <nav className="nav-menu">
    <Link to="/pm" className="nav-link"><FaTachometerAlt /> Dashboard</Link>
    <Link to="/pm/chat" className="nav-link"><FaComments /> Chat</Link>
    <Link to="/pm/request/:id" className="nav-link"><FaBoxes /> Material</Link>
    <Link to="/pm/manpower-list" className="nav-link"><FaUsers /> Manpower</Link>
    {project && (
      <Link to={`/pm/viewprojects/${project._id || project.id}`} className="nav-link">
        <FaProjectDiagram /> View Project
      </Link>
    )}
    <Link to="/pm/daily-logs" className="nav-link"><FaClipboardList /> Logs</Link>
    {project && (
      <Link to={`/pm/progress-report/${project._id}`} className="nav-link">
        <FaChartBar /> Reports
      </Link>
    )}
    <Link to="/pm/daily-logs-list" className="nav-link"><FaCalendarAlt /> Daily Logs</Link>
  </nav>

  <div className="profile-menu-container" style={{ display: 'flex', alignItems: 'center', gap: 18 }}>
    <NotificationBell />
    <div className="profile-circle" onClick={() => setProfileMenuOpen(!profileMenuOpen)}>
      {userName ? userName.charAt(0).toUpperCase() : 'Z'}
    </div>
    {profileMenuOpen && (
      <div className="profile-menu">
        <button onClick={handleLogout}>Logout</button>
      </div>
    )}
  </div>
</header>

      <div className="pm-progress-bg">
        <div className="pm-progress-container">
          <h1 className="pm-progress-title">Progress Report</h1>
          <div style={{ margin: "24px 0" }}>
            <button
              className="pm-btn pm-submit-btn"
              onClick={handleGenerateReport}
              disabled={loading}
            >
              {loading ? "Generating AI Analysis..." : "Generate AI Progress Report (DSS)"}
            </button>
            {aiAnalysis && (
              <button
                className="pm-btn pm-download-btn"
                onClick={handleDownloadPDF}
                style={{ marginLeft: 18 }}
              >
                Download as PDF
              </button>
            )}
          </div>
          {error && <div style={{ color: 'red', margin: '12px 0' }}>{error}</div>}
          {aiAnalysis && (
            <div className="ai-report" style={{
              background: "#fff",
              padding: "18px",
              borderRadius: 10,
              margin: "24px 0",
              boxShadow: "0 2px 12px #0002"
            }}>
              <h2>AI Decision Support Analysis:</h2>
              <pre style={{ whiteSpace: "pre-wrap", fontFamily: "inherit", fontSize: 15 }}>{aiAnalysis}</pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
