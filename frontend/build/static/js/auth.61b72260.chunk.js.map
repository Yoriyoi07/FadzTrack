{"version":3,"file":"static/js/auth.61b72260.chunk.js","mappings":"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","sources":["components/it/ResetPassword.js","components/TwoFactorAuth.js","components/it/ActivateAccount.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../../api/axiosInstance';\r\nimport '../style/it_style/ResetPassword.css';\r\n\r\nconst ResetPassword = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const token = searchParams.get('token');\r\n  const [password, setPassword] = useState('');\r\n  const [confirm, setConfirm] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const pass = (password || '').trim();\r\n    const conf = (confirm || '').trim();\r\n    const policyOk = /[A-Z]/.test(pass) && /\\d/.test(pass) && pass.length >= 6;\r\n    if (!pass || pass !== conf) {\r\n      setError('Passwords must match and not be empty');\r\n      return;\r\n    }\r\n    if (!policyOk) {\r\n      setError('Password must be at least 6 characters and include an uppercase letter and a number.');\r\n      return;\r\n    }\r\n    try {\r\n      await api.post('/auth/reset-password', { token, newPassword: pass });\r\n      alert('Password reset successful! You can now log in.');\r\n      navigate('/');\r\n    } catch (err) {\r\n      setError('Reset failed. The link may be expired or invalid.');\r\n    }\r\n  };\r\n\r\n\r\n  if (!token) return <div>Invalid reset password link</div>;\r\n\r\n  return (\r\n    <div className=\"reset-container\">\r\n      <div className=\"reset-card\">\r\n        <div className=\"icon-container\">\r\n          <svg className=\"lock-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\r\n            <path d=\"m7 11V7a5 5 0 0 1 10 0v4\"></path>\r\n          </svg>\r\n        </div>\r\n        \r\n        <h1 className=\"title\">Reset Password</h1>\r\n        <p className=\"subtitle\">Create a new secure password for your account</p>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"reset-form\">\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">New Password</label>\r\n            <div className=\"input-wrapper\">\r\n              <input\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                placeholder=\"Enter your new password\"\r\n                value={password}\r\n                onChange={e => setPassword(e.target.value)}\r\n                required\r\n                minLength={6}\r\n                className=\"form-input\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                className=\"toggle-password-btn\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n              >\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  {showPassword ? (\r\n                    <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"/>\r\n                  ) : (\r\n                    <>\r\n                      <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                      <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                    </>\r\n                  )}\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Confirm Password</label>\r\n            <div className=\"input-wrapper\">\r\n              <input\r\n                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                placeholder=\"Confirm your new password\"\r\n                value={confirm}\r\n                onChange={e => setConfirm(e.target.value)}\r\n                required\r\n                minLength={6}\r\n                className=\"form-input\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                className=\"toggle-password-btn\"\r\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n              >\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  {showConfirmPassword ? (\r\n                    <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"/>\r\n                  ) : (\r\n                    <>\r\n                      <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                      <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                    </>\r\n                  )}\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n\r\n          {!error && password && (\r\n            <div style={{ fontSize:12, marginTop:4 }}>\r\n              <span style={{ display:'block', color: /[A-Z]/.test(password) ? '#2f855a' : '#b91c1c' }}>• At least one uppercase letter {/[A-Z]/.test(password) ? '✓' : ''}</span>\r\n              <span style={{ display:'block', color: /\\d/.test(password) ? '#2f855a' : '#b91c1c' }}>• At least one number {/\\d/.test(password) ? '✓' : ''}</span>\r\n              <span style={{ display:'block', color: password.length >= 6 ? '#2f855a' : '#b91c1c' }}>• Minimum 6 characters {password.length >= 6 ? '✓' : ''}</span>\r\n            </div>\r\n          )}\r\n\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Set New Password\r\n          </button>\r\n        </form>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;","// src/components/TwoFactorAuth.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { FaShieldAlt, FaClock, FaEnvelope, FaCheckCircle } from 'react-icons/fa';\r\nimport api, { setAccessToken } from '../api/axiosInstance';\r\nimport { setUser } from '../api/userStore';\r\nimport './style/TwoFactorAuth.css';\r\n\r\nconst TwoFactorAuth = ({ email, onSuccess, forceUserUpdate }) => {\r\n  const [code, setCode] = useState('');\r\n  const [remember, setRemember] = useState(true);\r\n  const [message, setMessage] = useState('');\r\n  const [cooldown, setCooldown] = useState(0);\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [resending, setResending] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (code.length !== 6) return;\r\n    setSubmitting(true);\r\n    setMessage('');\r\n    try {\r\n  const { data } = await api.post('/auth/verify-2fa', { email, code, rememberDevice: remember });\r\n  setAccessToken(data.accessToken, { accessTokenExpiresAt: data.accessTokenExpiresAt });\r\n      const saved = setUser({ ...data.user }); // 🔧 normalize & persist\r\n\r\n      if (onSuccess) onSuccess(data.accessToken, saved);\r\n      if (forceUserUpdate) forceUserUpdate();\r\n    } catch (error) {\r\n      setMessage(error?.response?.data?.msg || 'Verification failed.');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleResend = async () => {\r\n    if (cooldown > 0) return;\r\n    setResending(true);\r\n    setMessage('');\r\n    try {\r\n      const res = await api.post('/auth/resend-2fa', { email });\r\n      setMessage(res.data.msg || 'Code resent successfully.');\r\n      setCooldown(30);\r\n    } catch (err) {\r\n      setMessage(err?.response?.data?.msg || 'Error resending code.');\r\n    } finally {\r\n      setResending(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!cooldown) return;\r\n    const iv = setInterval(() => setCooldown((c) => (c <= 1 ? (clearInterval(iv), 0) : c - 1)), 1000);\r\n    return () => clearInterval(iv);\r\n  }, [cooldown]);\r\n\r\n  return (\r\n    <div className=\"two-fa-container\">\r\n      <div className=\"two-fa-header\">\r\n        <div className=\"two-fa-title-row\">\r\n          <FaShieldAlt className=\"two-fa-icon\" size={24} />\r\n          <h2 className=\"two-fa-title\">Two-Factor Authentication</h2>\r\n        </div>\r\n        <p className=\"two-fa-subtitle\">\r\n          We sent a verification code to <strong>{email}</strong>\r\n        </p>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"two-fa-form\">\r\n        <div className=\"verification-input-group\">\r\n          <label htmlFor=\"verification-code\" className=\"verification-label\">\r\n            <FaEnvelope className=\"input-icon\" />\r\n            ENTER VERIFICATION CODE\r\n          </label>\r\n          <input\r\n            id=\"verification-code\"\r\n            type=\"text\"\r\n            inputMode=\"numeric\"\r\n            autoComplete=\"one-time-code\"\r\n            placeholder=\"Enter 6-digit code\"\r\n            value={code}\r\n            onChange={(e) => setCode(e.target.value.replace(/\\D/g, '').slice(0, 6))}\r\n            maxLength={6}\r\n            className=\"verification-input\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"remember-device-group\">\r\n          <label className=\"remember-device-label\">\r\n            <input \r\n              type=\"checkbox\" \r\n              checked={remember} \r\n              onChange={(e) => setRemember(e.target.checked)}\r\n              className=\"remember-checkbox\"\r\n            />\r\n            <span className=\"checkbox-custom\"></span>\r\n            <span className=\"remember-text\">Remember this device for 30 days</span>\r\n          </label>\r\n        </div>\r\n\r\n        <button \r\n          type=\"submit\" \r\n          className={`verify-button ${submitting ? 'loading' : ''}`} \r\n          disabled={submitting || code.length !== 6}\r\n        >\r\n          {submitting ? (\r\n            <span className=\"loading-content\">\r\n              <span className=\"spinner\"></span>\r\n              Verifying...\r\n            </span>\r\n          ) : (\r\n            <>\r\n              <FaCheckCircle className=\"button-icon\" />\r\n              Verify Code\r\n            </>\r\n          )}\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"resend-section\">\r\n        <button \r\n          onClick={handleResend} \r\n          disabled={cooldown > 0 || resending} \r\n          className={`resend-button ${cooldown > 0 ? 'disabled' : ''}`}\r\n        >\r\n          {cooldown > 0 ? (\r\n            <>\r\n              <FaClock className=\"button-icon\" />\r\n              Resend in {cooldown}s\r\n            </>\r\n          ) : resending ? (\r\n            <>\r\n              <span className=\"spinner\"></span>\r\n              Sending...\r\n            </>\r\n          ) : (\r\n            <>\r\n              <FaEnvelope className=\"button-icon\" />\r\n              Resend Code\r\n            </>\r\n          )}\r\n        </button>\r\n      </div>\r\n\r\n      {message && (\r\n        <div className={`message-display ${message.includes('successfully') ? 'success' : 'error'}`}>\r\n          <span className=\"message-text\">{message}</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TwoFactorAuth;\r\n","import React, { useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../../api/axiosInstance';\r\nimport '../style/it_style/ActivateAccount.css';\r\n\r\nconst ActivateAccount = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const token = searchParams.get('token');\r\n  const [password, setPassword] = useState('');\r\n  const [confirm, setConfirm] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const pass = (password || '').trim();\r\n    const conf = (confirm || '').trim();\r\n    const policyOk = /[A-Z]/.test(pass) && /\\d/.test(pass) && pass.length >= 6;\r\n    if (!pass || pass !== conf) {\r\n      setError('Passwords must match and not be empty');\r\n      return;\r\n    }\r\n    if (!policyOk) {\r\n      setError('Password must be at least 6 characters and include an uppercase letter and a number.');\r\n      return;\r\n    }\r\n    try {\r\n      await api.post('/auth/activate-account', { token, password: pass });\r\n      alert('Account activated! You can now log in.');\r\n      navigate('/');\r\n    } catch (err) {\r\n      const msg = err?.response?.data?.msg || '';\r\n      if (/already activated/i.test(msg)) {\r\n        // Treat as success (token reuse / user double-click)\r\n        alert('Account was already activated. You can log in now.');\r\n        navigate('/');\r\n        return;\r\n      }\r\n      if (/invalid|expired|token/i.test(msg)) {\r\n        setError('Activation failed. The link may be expired or invalid.');\r\n      } else if (msg) {\r\n        setError(msg);\r\n      } else {\r\n        setError('Activation failed. Please try again later.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBackToLogin = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (!token) return <div>Invalid activation link</div>;\r\n\r\n  return (\r\n    <div className=\"activation-container\">\r\n      <div className=\"activation-card\">\r\n        <div className=\"icon-container\">\r\n          <svg className=\"check-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n            <path d=\"M9 12l2 2 4-4\"/>\r\n            <circle cx=\"12\" cy=\"12\" r=\"9\"/>\r\n          </svg>\r\n        </div>\r\n        \r\n        <h1 className=\"title\">Activate Your Account</h1>\r\n        <p className=\"subtitle\">Set up your password to complete account activation</p>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"activation-form\">\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">New Password</label>\r\n            <div className=\"input-wrapper\">\r\n              <input\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                placeholder=\"Create your password\"\r\n                value={password}\r\n                onChange={e => setPassword(e.target.value)}\r\n                required\r\n                minLength={6}\r\n                className=\"form-input\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                className=\"toggle-password-btn\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n              >\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  {showPassword ? (\r\n                    <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"/>\r\n                  ) : (\r\n                    <>\r\n                      <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                      <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                    </>\r\n                  )}\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label className=\"form-label\">Confirm Password</label>\r\n            <div className=\"input-wrapper\">\r\n              <input\r\n                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                placeholder=\"Confirm your password\"\r\n                value={confirm}\r\n                onChange={e => setConfirm(e.target.value)}\r\n                required\r\n                minLength={6}\r\n                className=\"form-input\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                className=\"toggle-password-btn\"\r\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n              >\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\r\n                  {showConfirmPassword ? (\r\n                    <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"/>\r\n                  ) : (\r\n                    <>\r\n                      <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                      <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                    </>\r\n                  )}\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n\r\n          {!error && password && (\r\n            <div style={{ fontSize:12, marginTop:4, color: (/[^A-Z]/.test(password) || /[^0-9]/.test(password)) ? '#555' : '#2f855a' }}>\r\n              <span style={{ display:'block', color: /[A-Z]/.test(password) ? '#2f855a' : '#b91c1c' }}>• At least one uppercase letter {/[A-Z]/.test(password) ? '✓' : ''}</span>\r\n              <span style={{ display:'block', color: /\\d/.test(password) ? '#2f855a' : '#b91c1c' }}>• At least one number {/\\d/.test(password) ? '✓' : ''}</span>\r\n              <span style={{ display:'block', color: password.length >= 6 ? '#2f855a' : '#b91c1c' }}>• Minimum 6 characters {password.length >= 6 ? '✓' : ''}</span>\r\n            </div>\r\n          )}\r\n\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Set Password &amp; Activate\r\n          </button>\r\n        </form> \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivateAccount;"],"names":["ResetPassword","searchParams","useSearchParams","token","get","password","setPassword","useState","confirm","setConfirm","error","setError","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","_jsx","className","children","_jsxs","viewBox","fill","stroke","strokeWidth","x","y","width","height","rx","ry","d","onSubmit","async","e","preventDefault","pass","trim","conf","policyOk","test","length","api","post","newPassword","alert","err","type","placeholder","value","onChange","target","required","minLength","onClick","_Fragment","cx","cy","r","style","fontSize","marginTop","display","color","_ref","email","onSuccess","forceUserUpdate","code","setCode","remember","setRemember","message","setMessage","cooldown","setCooldown","submitting","setSubmitting","resending","setResending","useEffect","iv","setInterval","c","clearInterval","FaShieldAlt","size","data","rememberDevice","setAccessToken","accessToken","accessTokenExpiresAt","saved","setUser","_objectSpread","user","_error$response","_error$response$data","response","msg","htmlFor","FaEnvelope","id","inputMode","autoComplete","replace","slice","maxLength","checked","concat","disabled","FaCheckCircle","res","_err$response","_err$response$data","FaClock","includes","ActivateAccount"],"sourceRoot":""}