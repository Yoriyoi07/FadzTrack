{"ast":null,"code":"var _jsxFileName = \"E:\\\\Fadz_web\\\\FADZtrack-web-\\\\frontend\\\\src\\\\components\\\\it\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport api from '../../api/axiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get('token');\n  const [password, setPassword] = useState('');\n  const [confirm, setConfirm] = useState('');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!password || password !== confirm) {\n      setError('Passwords must match and not be empty');\n      return;\n    }\n    try {\n      await api.post('/auth/reset-password', {\n        token,\n        newPassword: password\n      });\n      alert('Password reset successful! You can now log in.');\n      navigate('/');\n    } catch (err) {\n      setError('Reset failed. The link may be expired or invalid.');\n    }\n  };\n  if (!token) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Invalid reset password link\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Your Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"New password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true,\n        minLength: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm password\",\n        value: confirm,\n        onChange: e => setConfirm(e.target.value),\n        required: true,\n        minLength: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Set New Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"3vX0mjMYCRWYNf676nmt9NPvk/8=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useSearchParams","useNavigate","api","jsxDEV","_jsxDEV","ResetPassword","_s","searchParams","token","get","password","setPassword","confirm","setConfirm","error","setError","navigate","handleSubmit","e","preventDefault","post","newPassword","alert","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","placeholder","value","onChange","target","required","minLength","style","color","_c","$RefreshReg$"],"sources":["E:/Fadz_web/FADZtrack-web-/frontend/src/components/it/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport api from '../../api/axiosInstance';\r\n\r\nconst ResetPassword = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const token = searchParams.get('token');\r\n  const [password, setPassword] = useState('');\r\n  const [confirm, setConfirm] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!password || password !== confirm) {\r\n      setError('Passwords must match and not be empty');\r\n      return;\r\n    }\r\n    try {\r\n      await api.post('/auth/reset-password', { token, newPassword: password });\r\n      alert('Password reset successful! You can now log in.');\r\n      navigate('/');\r\n    } catch (err) {\r\n      setError('Reset failed. The link may be expired or invalid.');\r\n    }\r\n  };\r\n\r\n  if (!token) return <div>Invalid reset password link</div>;\r\n\r\n  return (\r\n    <div className=\"reset-container\">\r\n      <h2>Reset Your Password</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"New password\"\r\n          value={password}\r\n          onChange={e => setPassword(e.target.value)}\r\n          required\r\n          minLength={6}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Confirm password\"\r\n          value={confirm}\r\n          onChange={e => setConfirm(e.target.value)}\r\n          required\r\n          minLength={6}\r\n        />\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        <button type=\"submit\">Set New Password</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}